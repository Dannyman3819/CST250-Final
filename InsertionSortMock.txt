# Implement insertion sort here
# Input arguments:
#	$a0 - starting memory address of the array to be sorted
#	$a1 - number of elements in array
# More information about insertion sort can be found here:
# http://en.wikipedia.org/wiki/Insertion_sort


#$v0 – RETURN ADDRESS
#$t0 – COMPARISON VALUE FOR SWAPPING
#$t1 – COMPARISON SLTU STORAGE
#$t2 – COPY OF ARRAY FROM $a0
#$t3 – MULTIPLIER INDEX LOCATION
#$t4 – INCREMENTER (4)
#$t3 - MULTIPLIER OF INDEX
#$t6 - VALUE OF 1
#$t7 - SWAP REGISTER
#$s0 – FIRST VALUE INDEX
#$s1 – SECOND VALUE INDEX
#$s2 - ACTUAL FIRST VALUE
#$s3 - ACTUAL SECOND VALUE
#$s4 – FLAG FOR SWAPPING
#$s5  – REVERSE FIRST VALUE
#$s6 – REVERSE SECOND VALUE


insertion_sort: 
	addiu $s0, $0, 0
	addiu $s1, $0, 1
	addiu $s4, $0, 0
getInsertionNumber:

	beq $s1, $a1, finishIt		# Test if we are done by having $s1 index at end.
	nop 

	addiu $t4, $0, 4			# Initialize our incrementer with value 4.

	mullo $t3, $t4, $s0			# Multiply to location of our index

	addu $t2, $t3, $a0			
# Add value from indexed location determined in $t3, and add that to our original $a0 to get memory
# location for the value we want to load into our register, we store this memory location in 
# register $t2, so $t2 has memory location of index for array element.

	lw $s2, 0($t2)			# Store this memory located element from $a0 into $s2, which is the final first index value.		

# Essentially line above is storing value into the 
# memory address of $a0 index.
# Store the value into output index 1.

	mullo $t3, $t4, $s1			# Multiply our second index value by our incrementer of 4 and store that into $t3 (multiplier location)

	addu $t2, $t3, $a0			# Add multiplier index location to original array and store that into $t2 as before.

	lw $s3, 0($t2)			# Fully store value into output index 2 for final value.

	slt $t0, $s3, $s2			# Is it the case that $s3 < $s2 $t0 = 1, we perform our check to see if we wish to swap. 
					# Else we will regather values by incrementing on.
	beq $t0, $0, dontSwapInsertion
	nop	
		addiu $s4, $0, 1		# Initialize swapping register.

		addiu $t4, $0, 4		# May be able to take this portion out.

		mullo $t3, $t4, $s1		# Multiply for index location of second index, which is were we will store the final first value.
	
		addu $t2, $t3, $a0		# Add to get to our memory location for first index, to which we will insert final first value.
	
		sw $s2, 0($t2)		# Store final first value in memory location of second value.
					
		mullo $t3, $t4, $s0		# Multiply to retrieve index location for first index.

		addu $t2, $t3, $a0		# Add incrementer from multiplied index to original array and store to $t2

		sw $s3, 0($t2)		# Store final second value in memory location of first index.

dontSwapInsertion:					# Don't swap is essentially the else statement from our beq $t0, $0, dontSwap conditional.
# Store final value for location of second value.

	addu $s5, $s0, $0			# Load s5 with s0, 
	
	addu $s6, $s0, $0			# Load s6 with s1
# INCREMENT OUR INDEXES
	addiu $s0, $s0, 1			# Increment our first index
	addiu $s1, $s1, 1			# Increment our second index.
	j getInsertionNumber			# Could take this out for less cycles because getNumber is called before swapping within reverseSwap method.
	nop

reverse_swap:

		addiu $t4, $0, 4
#Load s5 with s5-1
#subu $s5, $s5, $t6 # $t6=1
#OR
		addiu $s5, $s5, -1		# Decrement our first index location so we can start going down.
#Load s6 with s6-1
#subu $s6, $s6, $t6 #$t6=1
		addiu $s6, $s6, -1		# Decrement our second index location so we can start going down.
# May be able to take this portion out.
		mullo $t3, $t4, $s5		# Multiply our incrementer by first temp index location and store into $t3

		addu $t2, $t3, $a0		# Add multiplied index value to our $a0 to retrieve index location, store into $t2

		lw $s2, 0($t2)		# Store the value into our final first value.

		mullo $t3, $t4, $s6		# Multiply second temp index by incrementer & store into $t3
		
		addu $t2, $t3, $a0		# Add multiplier index to our $a0 to retrieve memory value and store into $t2
		
		lw $s3, 0($t2)		# Store t2 to our final second index which is $s3

		slt $t0, $s3, $s2		# Perform comparison as before, is our first index greater than second? Swap if so.

      		beq $t0, $0, getInsertionNumber	# If they aren't, we are fully sorted up to this point and can retrieve the new values.
      		nop			# Else lets swap

		#swapping
		mullo $t3, $t4, $s6		# Multiply our second temp index by incrementer to retrieve index value.

		addu $t2, $t3, $a0		# Add multiplier index to our $a0 and store into $t2; memory location that is.

		sw $s5, 0($t2)		# Store the first temp index value into $t2 memory location of our second index.

		mullo $t3, $t4, $s5		# Multiply first temp index by our incrementer of 4.
	
		addu $t2, $t3, $a0		# Add multiplier index to our original array location and store address into $t2.
	
		sw $s6, 0($t2)		# Store second temp value into our first index location.

		j reverse_swap 		# Jump back to our reverse swap to cycle through again and determine if we must continue decrementing.
		nop		
finishIt:
	bne $s4, $0, notDoneYet		# Test if swap bit is low, if so then we are
	nop
	return 				# Return back to main program.
	
notDoneYet:
	addiu $t0, $0, 1			# Set our swap determiner to 1.
	
	addu $s0, $t0, $s0			# Increment main pass index
	j insertion_sort
	nop