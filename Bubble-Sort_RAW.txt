bubble_sort:
	addu $s0, $0, $a0 #address of first number
	addu $s1, $0, $a0 #address of second number
	addiu $s4, $0, 0 #swap register	
	addiu $t4, $0, 4 #constant
	addiu $t5, $0, 1 #constant
	addu $s1, $s1, $t4 #offset addres to work on second number
	addiu $s5, $0, 1 #index counter
doPass:
	beq $s5, $a1, passDone	#test if we are done
	nop
	lw $s2, 0($s0)      #$s2 holds first number
	lw $s3, 0($s1)      #$s3 hold second number
	slt $t0, $s3, $s2   
	beq $t0, $0, dontSwap
	nop
		addiu $s4, $0, 1 #set swap register
		sw $s2, 0($s1)
		sw $s3, 0($s0)
	dontSwap:
	addu $s0, $s0, $t4 #add 4 to first address
	addu $s1, $s1, $t4 #add 4 to second address
	addu $s5, $s5, $t5 #increment index
	j doPass
	nop
passDone:
	bne $s4, $0, notDone #test if swap bit is low, if so then we are
	nop
		return 
	notDone:
	j bubble_sort
	nop